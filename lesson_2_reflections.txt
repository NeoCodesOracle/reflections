What happens when you initialize a repository? Why do you need to do it?

	When you initialize a repository, git adds the hidden directory
	.Git to keep track of the files inside the repository. Also, Git
	creates no commits so we cannot run any commands yet.

How is the staging area different from the working directory and the
repository? What value do you think it offers?

	The staging area allows us to make multiple changes and then
	commit them at a later time so that we may organize in logical
	order or whatever convention we use. The working directory simply
	contains all the files we are tracking. The repository contains
	only the changes we commit. 

How can you use the staging area to make sure you have one commit per logical
change?

	By adding changes to the staging area we have the ability
	to organize them or commit them in whatever order we want.

What are some situations when branches would be helpful in keeping your
history organized? How would branches help?

	When making big logical changes to an application and we don't
	want to modify the current version. For example, adding new
	features or having a different version altogether.

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Gitâ€™s automatic merging vs. always doing
merges manually?
